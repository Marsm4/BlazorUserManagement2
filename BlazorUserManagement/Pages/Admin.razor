@page "/admin"
@using BlazorUserManagement.Models
@using BlazorUserManagement.Services
@inject UserService UserService
@inject NavigationManager Navigation

<h3>Добро пожаловать, Администратор!</h3>

@if (users == null)
{
    <p>Загрузка...</p>
}
else
{
    <table>
        <tr>
            <th>ID</th>
            <th>Email</th>
            <th>Имя</th>
            <th>Роль</th>
            <th>Действие</th>
        </tr>
        @foreach (var user in users)
        {
            <tr>
                <td>@user.Id</td>
                <td>@user.Email</td>
                <td>@user.Name</td>
                <td>@user.Role</td>
                <td>
                    <button @onclick="() => EditUser(user.Id)">Редактировать</button>
                    <button @onclick="() => DeleteUser(user.Id)">Удалить</button>
                </td>
            </tr>
        }
    </table>

    <button @onclick="ShowAddUserForm">Добавить пользователя</button>

    @if (showAddUserForm)
    {
        <h4>Добавить нового пользователя</h4>
        <EditForm Model="@newUser" OnValidSubmit="AddUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label>Email:</label>
                <InputText @bind-Value="newUser.Email" />
            </div>

            <div>
                <label>Имя:</label>
                <InputText @bind-Value="newUser.Name" />
            </div>

            <div>
                <label>Описание:</label>
                <InputText @bind-Value="newUser.Description" />
            </div>

            <div>
                <label>Пароль:</label>
                <InputText @bind-Value="newUser.Password" type="password" />
            </div>

            <button type="submit">Добавить</button>
        </EditForm>
    }

    @if (showEditUserForm)
    {
        <h4>Редактировать пользователя</h4>
        <EditForm Model="@editedUser" OnValidSubmit="UpdateUser">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <label>Email:</label>
                <InputText @bind-Value="editedUser.Email" />
            </div>

            <div>
                <label>Имя:</label>
                <InputText @bind-Value="editedUser.Name" />
            </div>

            <div>
                <label>Описание:</label>
                <InputText @bind-Value="editedUser.Description" />
            </div>

            <div>
                <label>Пароль:</label>
                <InputText @bind-Value="editedUser.Password" type="password" />
            </div>

            <button type="submit">Обновить</button>
        </EditForm>
    }
}

@code {
    private List<UserDto> users;
    private RegisterUserDto newUser = new();
    private UpdateUserDto editedUser = new();
    private bool showAddUserForm = false;
    private bool showEditUserForm = false;
    private int? userToEditId;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetUsersAsync();
    }

    private void ShowAddUserForm()
    {
        showAddUserForm = !showAddUserForm;
    }

    private async Task AddUser()
    {
        var result = await UserService.AddUserAsync(newUser);
        if (result)
        {
            users = await UserService.GetUsersAsync(); // Обновляем список пользователей
            showAddUserForm = false;
        }
    }

    private async Task EditUser(int id)
    {
        userToEditId = id;
        var user = users.FirstOrDefault(u => u.Id == id);
        if (user != null)
        {
            editedUser = new UpdateUserDto
            {
                Email = user.Email,
                Name = user.Name,
                Description = user.Description,
                Password = "" // Можно оставить пароль пустым, если не планируется изменение
            };
            showEditUserForm = true;
        }
    }

    private async Task UpdateUser()
    {
        var result = await UserService.UpdateUserAsync(userToEditId.Value, editedUser);
        if (result)
        {
            users = await UserService.GetUsersAsync(); // Обновляем список пользователей
            showEditUserForm = false;
        }
    }

    private async Task DeleteUser(int id)
    {
        var result = await UserService.DeleteUserAsync(id);
        if (result)
        {
            users = users.Where(u => u.Id != id).ToList(); // Удаляем пользователя из списка
        }
    }
}
